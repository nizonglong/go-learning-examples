// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.1
// - protoc             v4.25.1
// source: jwt/v1/jwt.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationJwtGenerateJwt = "/jwt.v1.Jwt/GenerateJwt"
const OperationJwtValidateJwt = "/jwt.v1.Jwt/ValidateJwt"

type JwtHTTPServer interface {
	GenerateJwt(context.Context, *GenerateJwtRequest) (*GenerateJwtResponse, error)
	ValidateJwt(context.Context, *ValidateJwtRequest) (*ValidateJwtResponse, error)
}

func RegisterJwtHTTPServer(s *http.Server, srv JwtHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/jwt/create", _Jwt_GenerateJwt0_HTTP_Handler(srv))
	r.POST("/v1/jwt/valid", _Jwt_ValidateJwt0_HTTP_Handler(srv))
}

func _Jwt_GenerateJwt0_HTTP_Handler(srv JwtHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GenerateJwtRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationJwtGenerateJwt)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GenerateJwt(ctx, req.(*GenerateJwtRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GenerateJwtResponse)
		return ctx.Result(200, reply)
	}
}

func _Jwt_ValidateJwt0_HTTP_Handler(srv JwtHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ValidateJwtRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationJwtValidateJwt)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ValidateJwt(ctx, req.(*ValidateJwtRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ValidateJwtResponse)
		return ctx.Result(200, reply)
	}
}

type JwtHTTPClient interface {
	GenerateJwt(ctx context.Context, req *GenerateJwtRequest, opts ...http.CallOption) (rsp *GenerateJwtResponse, err error)
	ValidateJwt(ctx context.Context, req *ValidateJwtRequest, opts ...http.CallOption) (rsp *ValidateJwtResponse, err error)
}

type JwtHTTPClientImpl struct {
	cc *http.Client
}

func NewJwtHTTPClient(client *http.Client) JwtHTTPClient {
	return &JwtHTTPClientImpl{client}
}

func (c *JwtHTTPClientImpl) GenerateJwt(ctx context.Context, in *GenerateJwtRequest, opts ...http.CallOption) (*GenerateJwtResponse, error) {
	var out GenerateJwtResponse
	pattern := "/v1/jwt/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationJwtGenerateJwt))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *JwtHTTPClientImpl) ValidateJwt(ctx context.Context, in *ValidateJwtRequest, opts ...http.CallOption) (*ValidateJwtResponse, error) {
	var out ValidateJwtResponse
	pattern := "/v1/jwt/valid"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationJwtValidateJwt))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
