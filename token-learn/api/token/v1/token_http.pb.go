// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.1
// - protoc             v4.25.1
// source: token/v1/token.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationTokenCreateAccessToken = "/token.v1.Token/CreateAccessToken"
const OperationTokenDeleteToken = "/token.v1.Token/DeleteToken"
const OperationTokenGenerateToken = "/token.v1.Token/GenerateToken"
const OperationTokenValidateToken = "/token.v1.Token/ValidateToken"

type TokenHTTPServer interface {
	CreateAccessToken(context.Context, *CreateAccessTokenRequest) (*CreateAccessTokenResponse, error)
	DeleteToken(context.Context, *DeleteTokenRequest) (*DeleteTokenResponse, error)
	GenerateToken(context.Context, *GenerateTokenRequest) (*GenerateTokenResponse, error)
	ValidateToken(context.Context, *ValidateTokenRequest) (*ValidateTokenResponse, error)
}

func RegisterTokenHTTPServer(s *http.Server, srv TokenHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/token/create", _Token_GenerateToken0_HTTP_Handler(srv))
	r.POST("/v1/token/delete", _Token_DeleteToken0_HTTP_Handler(srv))
	r.POST("/v1/token/valid", _Token_ValidateToken0_HTTP_Handler(srv))
	r.POST("/v1/token/access", _Token_CreateAccessToken0_HTTP_Handler(srv))
}

func _Token_GenerateToken0_HTTP_Handler(srv TokenHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GenerateTokenRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTokenGenerateToken)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GenerateToken(ctx, req.(*GenerateTokenRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GenerateTokenResponse)
		return ctx.Result(200, reply)
	}
}

func _Token_DeleteToken0_HTTP_Handler(srv TokenHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteTokenRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTokenDeleteToken)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteToken(ctx, req.(*DeleteTokenRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteTokenResponse)
		return ctx.Result(200, reply)
	}
}

func _Token_ValidateToken0_HTTP_Handler(srv TokenHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ValidateTokenRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTokenValidateToken)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ValidateToken(ctx, req.(*ValidateTokenRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ValidateTokenResponse)
		return ctx.Result(200, reply)
	}
}

func _Token_CreateAccessToken0_HTTP_Handler(srv TokenHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateAccessTokenRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTokenCreateAccessToken)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateAccessToken(ctx, req.(*CreateAccessTokenRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateAccessTokenResponse)
		return ctx.Result(200, reply)
	}
}

type TokenHTTPClient interface {
	CreateAccessToken(ctx context.Context, req *CreateAccessTokenRequest, opts ...http.CallOption) (rsp *CreateAccessTokenResponse, err error)
	DeleteToken(ctx context.Context, req *DeleteTokenRequest, opts ...http.CallOption) (rsp *DeleteTokenResponse, err error)
	GenerateToken(ctx context.Context, req *GenerateTokenRequest, opts ...http.CallOption) (rsp *GenerateTokenResponse, err error)
	ValidateToken(ctx context.Context, req *ValidateTokenRequest, opts ...http.CallOption) (rsp *ValidateTokenResponse, err error)
}

type TokenHTTPClientImpl struct {
	cc *http.Client
}

func NewTokenHTTPClient(client *http.Client) TokenHTTPClient {
	return &TokenHTTPClientImpl{client}
}

func (c *TokenHTTPClientImpl) CreateAccessToken(ctx context.Context, in *CreateAccessTokenRequest, opts ...http.CallOption) (*CreateAccessTokenResponse, error) {
	var out CreateAccessTokenResponse
	pattern := "/v1/token/access"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationTokenCreateAccessToken))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TokenHTTPClientImpl) DeleteToken(ctx context.Context, in *DeleteTokenRequest, opts ...http.CallOption) (*DeleteTokenResponse, error) {
	var out DeleteTokenResponse
	pattern := "/v1/token/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationTokenDeleteToken))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TokenHTTPClientImpl) GenerateToken(ctx context.Context, in *GenerateTokenRequest, opts ...http.CallOption) (*GenerateTokenResponse, error) {
	var out GenerateTokenResponse
	pattern := "/v1/token/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationTokenGenerateToken))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TokenHTTPClientImpl) ValidateToken(ctx context.Context, in *ValidateTokenRequest, opts ...http.CallOption) (*ValidateTokenResponse, error) {
	var out ValidateTokenResponse
	pattern := "/v1/token/valid"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationTokenValidateToken))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
