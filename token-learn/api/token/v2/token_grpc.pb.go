// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: token/v2/token.proto

package v2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TokenV2_GenerateTokenV2_FullMethodName     = "/token.v2.TokenV2/GenerateTokenV2"
	TokenV2_DeleteTokenV2_FullMethodName       = "/token.v2.TokenV2/DeleteTokenV2"
	TokenV2_ValidateTokenV2_FullMethodName     = "/token.v2.TokenV2/ValidateTokenV2"
	TokenV2_CreateAccessTokenV2_FullMethodName = "/token.v2.TokenV2/CreateAccessTokenV2"
)

// TokenV2Client is the client API for TokenV2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TokenV2Client interface {
	GenerateTokenV2(ctx context.Context, in *GenerateTokenV2Request, opts ...grpc.CallOption) (*GenerateTokenV2Response, error)
	DeleteTokenV2(ctx context.Context, in *DeleteTokenV2Request, opts ...grpc.CallOption) (*DeleteTokenV2Response, error)
	ValidateTokenV2(ctx context.Context, in *ValidateTokenV2Request, opts ...grpc.CallOption) (*ValidateTokenV2Response, error)
	CreateAccessTokenV2(ctx context.Context, in *CreateAccessTokenV2Request, opts ...grpc.CallOption) (*CreateAccessTokenV2Response, error)
}

type tokenV2Client struct {
	cc grpc.ClientConnInterface
}

func NewTokenV2Client(cc grpc.ClientConnInterface) TokenV2Client {
	return &tokenV2Client{cc}
}

func (c *tokenV2Client) GenerateTokenV2(ctx context.Context, in *GenerateTokenV2Request, opts ...grpc.CallOption) (*GenerateTokenV2Response, error) {
	out := new(GenerateTokenV2Response)
	err := c.cc.Invoke(ctx, TokenV2_GenerateTokenV2_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenV2Client) DeleteTokenV2(ctx context.Context, in *DeleteTokenV2Request, opts ...grpc.CallOption) (*DeleteTokenV2Response, error) {
	out := new(DeleteTokenV2Response)
	err := c.cc.Invoke(ctx, TokenV2_DeleteTokenV2_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenV2Client) ValidateTokenV2(ctx context.Context, in *ValidateTokenV2Request, opts ...grpc.CallOption) (*ValidateTokenV2Response, error) {
	out := new(ValidateTokenV2Response)
	err := c.cc.Invoke(ctx, TokenV2_ValidateTokenV2_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenV2Client) CreateAccessTokenV2(ctx context.Context, in *CreateAccessTokenV2Request, opts ...grpc.CallOption) (*CreateAccessTokenV2Response, error) {
	out := new(CreateAccessTokenV2Response)
	err := c.cc.Invoke(ctx, TokenV2_CreateAccessTokenV2_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TokenV2Server is the server API for TokenV2 service.
// All implementations must embed UnimplementedTokenV2Server
// for forward compatibility
type TokenV2Server interface {
	GenerateTokenV2(context.Context, *GenerateTokenV2Request) (*GenerateTokenV2Response, error)
	DeleteTokenV2(context.Context, *DeleteTokenV2Request) (*DeleteTokenV2Response, error)
	ValidateTokenV2(context.Context, *ValidateTokenV2Request) (*ValidateTokenV2Response, error)
	CreateAccessTokenV2(context.Context, *CreateAccessTokenV2Request) (*CreateAccessTokenV2Response, error)
	mustEmbedUnimplementedTokenV2Server()
}

// UnimplementedTokenV2Server must be embedded to have forward compatible implementations.
type UnimplementedTokenV2Server struct {
}

func (UnimplementedTokenV2Server) GenerateTokenV2(context.Context, *GenerateTokenV2Request) (*GenerateTokenV2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateTokenV2 not implemented")
}
func (UnimplementedTokenV2Server) DeleteTokenV2(context.Context, *DeleteTokenV2Request) (*DeleteTokenV2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTokenV2 not implemented")
}
func (UnimplementedTokenV2Server) ValidateTokenV2(context.Context, *ValidateTokenV2Request) (*ValidateTokenV2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateTokenV2 not implemented")
}
func (UnimplementedTokenV2Server) CreateAccessTokenV2(context.Context, *CreateAccessTokenV2Request) (*CreateAccessTokenV2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccessTokenV2 not implemented")
}
func (UnimplementedTokenV2Server) mustEmbedUnimplementedTokenV2Server() {}

// UnsafeTokenV2Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TokenV2Server will
// result in compilation errors.
type UnsafeTokenV2Server interface {
	mustEmbedUnimplementedTokenV2Server()
}

func RegisterTokenV2Server(s grpc.ServiceRegistrar, srv TokenV2Server) {
	s.RegisterService(&TokenV2_ServiceDesc, srv)
}

func _TokenV2_GenerateTokenV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateTokenV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenV2Server).GenerateTokenV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TokenV2_GenerateTokenV2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenV2Server).GenerateTokenV2(ctx, req.(*GenerateTokenV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenV2_DeleteTokenV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTokenV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenV2Server).DeleteTokenV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TokenV2_DeleteTokenV2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenV2Server).DeleteTokenV2(ctx, req.(*DeleteTokenV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenV2_ValidateTokenV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateTokenV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenV2Server).ValidateTokenV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TokenV2_ValidateTokenV2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenV2Server).ValidateTokenV2(ctx, req.(*ValidateTokenV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenV2_CreateAccessTokenV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccessTokenV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenV2Server).CreateAccessTokenV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TokenV2_CreateAccessTokenV2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenV2Server).CreateAccessTokenV2(ctx, req.(*CreateAccessTokenV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

// TokenV2_ServiceDesc is the grpc.ServiceDesc for TokenV2 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TokenV2_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "token.v2.TokenV2",
	HandlerType: (*TokenV2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateTokenV2",
			Handler:    _TokenV2_GenerateTokenV2_Handler,
		},
		{
			MethodName: "DeleteTokenV2",
			Handler:    _TokenV2_DeleteTokenV2_Handler,
		},
		{
			MethodName: "ValidateTokenV2",
			Handler:    _TokenV2_ValidateTokenV2_Handler,
		},
		{
			MethodName: "CreateAccessTokenV2",
			Handler:    _TokenV2_CreateAccessTokenV2_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "token/v2/token.proto",
}
