// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.1
// - protoc             v4.25.1
// source: token/v2/token.proto

package v2

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationTokenV2CreateAccessTokenV2 = "/token.v2.TokenV2/CreateAccessTokenV2"
const OperationTokenV2DeleteTokenV2 = "/token.v2.TokenV2/DeleteTokenV2"
const OperationTokenV2GenerateTokenV2 = "/token.v2.TokenV2/GenerateTokenV2"
const OperationTokenV2ValidateTokenV2 = "/token.v2.TokenV2/ValidateTokenV2"

type TokenV2HTTPServer interface {
	CreateAccessTokenV2(context.Context, *CreateAccessTokenV2Request) (*CreateAccessTokenV2Response, error)
	DeleteTokenV2(context.Context, *DeleteTokenV2Request) (*DeleteTokenV2Response, error)
	GenerateTokenV2(context.Context, *GenerateTokenV2Request) (*GenerateTokenV2Response, error)
	ValidateTokenV2(context.Context, *ValidateTokenV2Request) (*ValidateTokenV2Response, error)
}

func RegisterTokenV2HTTPServer(s *http.Server, srv TokenV2HTTPServer) {
	r := s.Route("/")
	r.POST("/v2/token/create", _TokenV2_GenerateTokenV20_HTTP_Handler(srv))
	r.POST("/v2/token/delete", _TokenV2_DeleteTokenV20_HTTP_Handler(srv))
	r.POST("/v2/token/valid", _TokenV2_ValidateTokenV20_HTTP_Handler(srv))
	r.POST("/v2/token/access", _TokenV2_CreateAccessTokenV20_HTTP_Handler(srv))
}

func _TokenV2_GenerateTokenV20_HTTP_Handler(srv TokenV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GenerateTokenV2Request
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTokenV2GenerateTokenV2)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GenerateTokenV2(ctx, req.(*GenerateTokenV2Request))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GenerateTokenV2Response)
		return ctx.Result(200, reply)
	}
}

func _TokenV2_DeleteTokenV20_HTTP_Handler(srv TokenV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteTokenV2Request
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTokenV2DeleteTokenV2)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteTokenV2(ctx, req.(*DeleteTokenV2Request))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteTokenV2Response)
		return ctx.Result(200, reply)
	}
}

func _TokenV2_ValidateTokenV20_HTTP_Handler(srv TokenV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ValidateTokenV2Request
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTokenV2ValidateTokenV2)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ValidateTokenV2(ctx, req.(*ValidateTokenV2Request))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ValidateTokenV2Response)
		return ctx.Result(200, reply)
	}
}

func _TokenV2_CreateAccessTokenV20_HTTP_Handler(srv TokenV2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateAccessTokenV2Request
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTokenV2CreateAccessTokenV2)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateAccessTokenV2(ctx, req.(*CreateAccessTokenV2Request))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateAccessTokenV2Response)
		return ctx.Result(200, reply)
	}
}

type TokenV2HTTPClient interface {
	CreateAccessTokenV2(ctx context.Context, req *CreateAccessTokenV2Request, opts ...http.CallOption) (rsp *CreateAccessTokenV2Response, err error)
	DeleteTokenV2(ctx context.Context, req *DeleteTokenV2Request, opts ...http.CallOption) (rsp *DeleteTokenV2Response, err error)
	GenerateTokenV2(ctx context.Context, req *GenerateTokenV2Request, opts ...http.CallOption) (rsp *GenerateTokenV2Response, err error)
	ValidateTokenV2(ctx context.Context, req *ValidateTokenV2Request, opts ...http.CallOption) (rsp *ValidateTokenV2Response, err error)
}

type TokenV2HTTPClientImpl struct {
	cc *http.Client
}

func NewTokenV2HTTPClient(client *http.Client) TokenV2HTTPClient {
	return &TokenV2HTTPClientImpl{client}
}

func (c *TokenV2HTTPClientImpl) CreateAccessTokenV2(ctx context.Context, in *CreateAccessTokenV2Request, opts ...http.CallOption) (*CreateAccessTokenV2Response, error) {
	var out CreateAccessTokenV2Response
	pattern := "/v2/token/access"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationTokenV2CreateAccessTokenV2))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TokenV2HTTPClientImpl) DeleteTokenV2(ctx context.Context, in *DeleteTokenV2Request, opts ...http.CallOption) (*DeleteTokenV2Response, error) {
	var out DeleteTokenV2Response
	pattern := "/v2/token/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationTokenV2DeleteTokenV2))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TokenV2HTTPClientImpl) GenerateTokenV2(ctx context.Context, in *GenerateTokenV2Request, opts ...http.CallOption) (*GenerateTokenV2Response, error) {
	var out GenerateTokenV2Response
	pattern := "/v2/token/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationTokenV2GenerateTokenV2))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TokenV2HTTPClientImpl) ValidateTokenV2(ctx context.Context, in *ValidateTokenV2Request, opts ...http.CallOption) (*ValidateTokenV2Response, error) {
	var out ValidateTokenV2Response
	pattern := "/v2/token/valid"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationTokenV2ValidateTokenV2))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
